[{"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/index.js":"1","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/reportWebVitals.js":"2","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/App.js":"3","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/Navbar.js":"4","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/HomeScreen.js":"5","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/productsData.js":"6","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/slideData.js":"7","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/ImageSlider.js":"8","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/Product.js":"9","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/ProductScreen.js":"10","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/CartScreen.js":"11","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/Footer.js":"12","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/LoginScreen.js":"13","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/Rating.js":"14","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/store.js":"15","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/reducers/productReducers.js":"16","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/constants/productConstants.js":"17","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/actions/productActions.js":"18","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/reducers/cartReducers.js":"19","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/constants/cartConstants.js":"20","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/actions/cartActions.js":"21","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/reducers/userReducer.js":"22","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/constants/userConstants.js":"23","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/actions/userActions.js":"24","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/MenuItems.js":"25","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/UseDetectOutsideClick.js":"26","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/ProfileScreen.js":"27","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/ShippingScreen.js":"28","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/PaymentScreen.js":"29","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/PlaceOrderScreen.js":"30","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/OrderScreen.js":"31","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/Message.js":"32","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/Spinner.js":"33","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/CheckoutSteps.js":"34","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/reducers/orderReducers.js":"35","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/constants/orderConstants.js":"36","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/actions/orderActions.js":"37","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/UserListScreen.js":"38","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/UserEditScreen.js":"39"},{"size":558,"mtime":1607897759741,"results":"40","hashOfConfig":"41"},{"size":362,"mtime":1607044994128,"results":"42","hashOfConfig":"41"},{"size":1794,"mtime":1611146054578,"results":"43","hashOfConfig":"41"},{"size":6853,"mtime":1610988111756,"results":"44","hashOfConfig":"41"},{"size":1442,"mtime":1609638482663,"results":"45","hashOfConfig":"41"},{"size":2646,"mtime":1607895399660,"results":"46","hashOfConfig":"41"},{"size":283,"mtime":1607213217846,"results":"47","hashOfConfig":"41"},{"size":624,"mtime":1607216001673,"results":"48","hashOfConfig":"41"},{"size":1173,"mtime":1608208464048,"results":"49","hashOfConfig":"41"},{"size":5174,"mtime":1609557750097,"results":"50","hashOfConfig":"41"},{"size":4487,"mtime":1610460040297,"results":"51","hashOfConfig":"41"},{"size":1193,"mtime":1607650582159,"results":"52","hashOfConfig":"41"},{"size":5851,"mtime":1609513376071,"results":"53","hashOfConfig":"41"},{"size":1435,"mtime":1607649457807,"results":"54","hashOfConfig":"41"},{"size":2197,"mtime":1611154713431,"results":"55","hashOfConfig":"41"},{"size":1057,"mtime":1607949915754,"results":"56","hashOfConfig":"41"},{"size":361,"mtime":1607911176423,"results":"57","hashOfConfig":"41"},{"size":1230,"mtime":1607911616032,"results":"58","hashOfConfig":"41"},{"size":1525,"mtime":1609626713722,"results":"59","hashOfConfig":"41"},{"size":234,"mtime":1609626437821,"results":"60","hashOfConfig":"41"},{"size":1436,"mtime":1609626918667,"results":"61","hashOfConfig":"41"},{"size":3644,"mtime":1611154471074,"results":"62","hashOfConfig":"41"},{"size":1476,"mtime":1611153121828,"results":"63","hashOfConfig":"41"},{"size":6698,"mtime":1611154064026,"results":"64","hashOfConfig":"41"},{"size":530,"mtime":1610989847832,"results":"65","hashOfConfig":"41"},{"size":751,"mtime":1610376490174,"results":"66","hashOfConfig":"41"},{"size":5656,"mtime":1610394808188,"results":"67","hashOfConfig":"41"},{"size":2562,"mtime":1609625889713,"results":"68","hashOfConfig":"41"},{"size":1676,"mtime":1611148789738,"results":"69","hashOfConfig":"41"},{"size":5131,"mtime":1610394793023,"results":"70","hashOfConfig":"41"},{"size":7474,"mtime":1610459737755,"results":"71","hashOfConfig":"41"},{"size":322,"mtime":1609785987820,"results":"72","hashOfConfig":"41"},{"size":288,"mtime":1609558342845,"results":"73","hashOfConfig":"41"},{"size":1660,"mtime":1609603707682,"results":"74","hashOfConfig":"41"},{"size":2446,"mtime":1610459283073,"results":"75","hashOfConfig":"41"},{"size":878,"mtime":1610459220713,"results":"76","hashOfConfig":"41"},{"size":3721,"mtime":1610459730838,"results":"77","hashOfConfig":"41"},{"size":3027,"mtime":1611156627848,"results":"78","hashOfConfig":"41"},{"size":3202,"mtime":1611156963698,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1r2lgq3",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"82"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/index.js",[],["166","167"],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/reportWebVitals.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/App.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/Navbar.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/HomeScreen.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/productsData.js",[],["168","169"],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/slideData.js",[],["170","171"],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/ImageSlider.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/Product.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/ProductScreen.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/CartScreen.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/Footer.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/LoginScreen.js",["172","173","174","175","176","177"],"import React, { useState, useRef, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport '../styles/LoginScreen.css'\nimport { login, register } from '../actions/userActions'\n\nconst LoginScreen = ({ location, history }) => {\n  const containerRef = useRef(null)\n\n  // Login Initial state\n  const loginEmail = useRef('')\n  const loginPassword = useRef('')\n\n  // Register Initial state\n  const registerName = useRef('')\n  const registerEmail = useRef('')\n  const registerPassword = useRef('')\n  const registerConfirmPassword = useRef('')\n\n  // Adds the active panel to the class\n  const signupAnimate = () => {\n    containerRef.current.classList.add('right-panel-active')\n  }\n  // Removes the active panel from the class\n  const signinAnimate = () => {\n    containerRef.current.classList.remove('right-panel-active')\n  }\n  // Calls/Invoke an action\n  const dispatch = useDispatch()\n\n  // Brings in Data from the global state (Redux Store)\n  const userLogin = useSelector(state => state.userLogin)\n  const { loading, error, userInfo } = userLogin\n\n  // Brings in Data from the global state (Redux Store)\n  const userRegister = useSelector(state => state.userRegister)\n  const {\n    loading: loadingRegister,\n    error: errorRegister,\n    userInfo: userInfoRegister,\n  } = userRegister\n\n  // Checks for Redirect\n  const redirect = location.search ? location.search.split('=')[1] : '/'\n\n  // Cause a side-effect when the component loads\n  useEffect(() => {\n    if (userInfo) {\n      history.push(redirect)\n    }\n  }, [history, userInfo, redirect])\n\n  // User login handler\n  const loginSubmitHandler = e => {\n    e.preventDefault()\n\n    dispatch(login(loginEmail.current.value, loginPassword.current.value))\n    // setLoginEmail('')\n    // setLoginPassword('')\n  }\n\n  // User register Handler\n  const registerSubmitHandler = e => {\n    if (\n      registerPassword.current.value !== registerConfirmPassword.current.value\n    ) {\n      alert('Password do not match')\n    } else {\n      dispatch(\n        register(\n          registerName.current.value,\n          registerEmail.current.value,\n          registerPassword.current.value\n        )\n      )\n    }\n\n    e.preventDefault()\n  }\n\n  return (\n    <main className='loginScreen'>\n      <div className='container' id='container' ref={containerRef}>\n        <div className='form-container sign-up-container'>\n          <form onSubmit={registerSubmitHandler}>\n            <h1>Create Account</h1>\n            <div className='social-container'>\n              <Link to='#' className='social'>\n                <i className='fab fa-facebook-f'></i>\n              </Link>\n              <Link to='#' className='social'>\n                <i className='fab fa-google-plus-g'></i>\n              </Link>\n              <Link to='#' className='social'>\n                <i className='fab fa-linkedin-in'></i>\n              </Link>\n            </div>\n            <span>or use your email for registration</span>\n            <input type='text' placeholder='Name' ref={registerName} />\n            <input type='email' placeholder='Email' ref={registerEmail} />\n            <input\n              type='password'\n              placeholder='Password'\n              ref={registerPassword}\n            />\n            <input\n              type='password'\n              placeholder='Confirm password'\n              ref={registerConfirmPassword}\n            />\n            <button type='submit'>Sign Up</button>\n          </form>\n        </div>\n        <div className='form-container sign-in-container'>\n          <form action='#' onSubmit={loginSubmitHandler}>\n            <h1>Sign in</h1>\n            <div className='social-container'>\n              <Link to='#' className='social'>\n                <i className='fab fa-facebook-f'></i>\n              </Link>\n              <Link to='#' className='social'>\n                <i className='fab fa-google-plus-g'></i>\n              </Link>\n              <Link to='#' className='social'>\n                <i className='fab fa-linkedin-in'></i>\n              </Link>\n            </div>\n            <span>or use your account</span>\n            <input\n              type='email'\n              placeholder='Email'\n              ref={loginEmail}\n              // value={loginEmail}\n              // onChange={e => setLoginEmail(e.target.value)}\n            />\n            <input\n              type='password'\n              placeholder='Password'\n              ref={loginPassword}\n              // value={loginPassword}\n              // onChange={e => setLoginPassword(e.target.value)}\n            />\n            <Link to='#'>Forgot your password?</Link>\n            <button type='submit'>Sign In</button>\n          </form>\n        </div>\n        <div className='overlay-container'>\n          <div className='overlay'>\n            <div className='overlay-panel overlay-left'>\n              <h1>Welcome Back!</h1>\n              <p>\n                To keep connected with us please login with your personal info\n              </p>\n              <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>\n                <button className='ghost' id='signIn' onClick={signinAnimate}>\n                  Sign In\n                </button>\n              </Link>\n            </div>\n\n            <div className='overlay-panel overlay-right'>\n              <h1>Hello, Friend!</h1>\n              <p>Enter your personal details and start journey with us</p>\n              <Link\n                to={redirect ? `/register?redirect=${redirect}` : '/register'}\n              >\n                <button className='ghost' id='signUp' onClick={signupAnimate}>\n                  Sign Up\n                </button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  )\n}\n\nexport default LoginScreen\n","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/Rating.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/store.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/reducers/productReducers.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/constants/productConstants.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/actions/productActions.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/reducers/cartReducers.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/constants/cartConstants.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/actions/cartActions.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/reducers/userReducer.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/constants/userConstants.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/actions/userActions.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/MenuItems.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/UseDetectOutsideClick.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/ProfileScreen.js",["178"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport '../styles/ProfileScreen.css'\nimport Spinner from '../components/Spinner'\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\nimport { listMyOrders } from '../actions/orderActions'\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\nimport Message from '../components/Message'\n\nconst ProfileScreen = ({ history }) => {\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [confirmPassword, setConfirmPassword] = useState('')\n\n  // Calls/Invoke an action\n  const dispatch = useDispatch()\n\n  // Brings in Date from global state (Redux Store)\n  const userDetails = useSelector(state => state.userDetails)\n  const { loading, error, user } = userDetails\n\n  // Brings in Date from global state (Redux Store)\n  const userLogin = useSelector(state => state.userLogin)\n  const { userInfo } = userLogin\n\n  // Brings in Date from global state (Redux Store)\n  const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n  const { success } = userUpdateProfile\n\n  // Brings in Date from global state (Redux Store)\n  const orderListMy = useSelector(state => state.orderListMy)\n  const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\n\n  // Cause a side-effect when the componet loads\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/login')\n    } else {\n      if (!user || !user.name || success) {\n        dispatch({ type: USER_UPDATE_PROFILE_RESET })\n        dispatch(getUserDetails('profile'))\n        dispatch(listMyOrders())\n      } else {\n        setName(user.name)\n        setEmail(user.email)\n      }\n    }\n  }, [dispatch, history, userInfo, user, success])\n\n  // Submit method/function\n  const submitHandler = e => {\n    e.preventDefault()\n    if (password !== confirmPassword) {\n      // setMessage('Password do not match')\n      alert('Password do not match')\n    } else {\n      dispatch(updateUserProfile({ id: user._id, name, email, password }))\n    }\n  }\n\n  return (\n    <main className='profileScreen'>\n      <div className='profileScreen__user'>\n        <p className='title'>User Profile</p>\n        {loading && <Spinner />}\n        <div className='profileScreen__formContainer'>\n          <form onSubmit={submitHandler}>\n            <label htmlFor='name'>Name</label>\n            <input\n              type='text'\n              id='name'\n              placeholder='Enter name'\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n            <label htmlFor='email'>Email</label>\n            <input\n              type='email'\n              id='email'\n              placeholder='Enter email'\n              value={email}\n              onChange={e => setEmail(e.target.value)}\n            />\n            <label htmlFor='password'>Password</label>\n            <input\n              type='password'\n              id='password'\n              placeholder='Enter password'\n              value={password}\n              onChange={e => setPassword(e.target.value)}\n            />\n            <label htmlFor='comfirmPassword'>Confirm Password</label>\n            <input\n              type='password'\n              id='comfirmPassword'\n              placeholder='Confirm password'\n              value={confirmPassword}\n              onChange={e => setConfirmPassword(e.target.value)}\n            />\n            <button type='submit'>Update</button>\n          </form>\n        </div>\n      </div>\n\n      <div className='profileScreen__orders'>\n        <p className='title'>My Orders</p>\n        {loadingOrders ? (\n          <Spinner />\n        ) : errorOrders ? (\n          <Message>{errorOrders}</Message>\n        ) : (\n          <div className='profileScreen__orders-table'>\n            <table>\n              <thead>\n                <tr>\n                  <th>ID</th>\n                  <th>DATE</th>\n                  <th>TOTAL</th>\n                  <th>PAID</th>\n                  <th>DELIVERED</th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {orders.map(order => (\n                  <tr key={order._id}>\n                    <td>{order._id}</td>\n                    <td>{order.createdAt.substring(0, 10)}</td>\n                    <td>{order.totalPrice}</td>\n                    <td>\n                      {order.isPaid ? (\n                        order.paidAt.substring(0, 10)\n                      ) : (\n                        <i\n                          className='fas fa-times'\n                          style={{ color: 'red' }}\n                        ></i>\n                      )}\n                    </td>\n                    <td>\n                      {order.isDelivered ? (\n                        order.deliveredAt.subtring(0, 10)\n                      ) : (\n                        <i\n                          className='fas fa-times'\n                          style={{ color: 'red' }}\n                        ></i>\n                      )}\n                    </td>\n                    <td>\n                      <Link to={`/orders/${order._id}`}>\n                        <button className='profileScreen__orders-btn'>\n                          Detials\n                        </button>\n                      </Link>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </main>\n  )\n}\n\nexport default ProfileScreen\n","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/ShippingScreen.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/PaymentScreen.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/PlaceOrderScreen.js",["179"],"import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport '../styles/PlaceOrderScreen.css'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport Message from '../components/Message'\nimport { createOrder } from '../actions/orderActions'\n\nconst PlaceOrderScreen = ({ history }) => {\n  // Calls/Invokes an action\n  const dispatch = useDispatch()\n\n  // Brings in Data from the global state (Redux Store)\n  const cart = useSelector(state => state.cart)\n\n  // Function that add two decimal to a value\n  const addDecimals = num => {\n    return (Math.round(num * 100) / 100).toFixed(2)\n  }\n\n  // Calculate price of all items\n  cart.itemsPrice = addDecimals(\n    cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n  )\n\n  // Calculate shipping cost\n  cart.shippingPrice = addDecimals(cart.itemsPrice > 100 ? 0 : 100)\n\n  // Calculate Tax\n  cart.taxPrice = addDecimals(Number(0.15 * cart.itemsPrice))\n\n  // Calculate Total Price\n  cart.totalPrice = (\n    Number(cart.itemsPrice) +\n    Number(cart.shippingPrice) +\n    Number(cart.taxPrice)\n  ).toFixed(2)\n\n  // Brings in data from global state (Redux store)\n  const orderCreate = useSelector(state => state.orderCreate)\n  const { order, success, error } = orderCreate\n\n  // Cause a side-effect when the component loads\n  useEffect(() => {\n    if (success) {\n      history.push(`/orders/${order._id}`)\n    }\n  }, [history, success, order])\n\n  // PlaceOrder function\n  const placeOrderHandler = () => {\n    dispatch(\n      createOrder({\n        orderItems: cart.cartItems,\n        shippingAddress: cart.shippingAddress,\n        paymentMethod: cart.paymentMethod,\n        itemsPrice: cart.itemsPrice,\n        shippingPrice: cart.shippingPrice,\n        taxPrice: cart.taxPrice,\n        totalPrice: cart.totalPrice,\n      })\n    )\n  }\n\n  return (\n    <main className='placeOrderScreen'>\n      <CheckoutSteps step1 step2 step3 step4 />\n      <div className='placeOrderScreen__content'>\n        {/* PlaceOrder Details */}\n        <div className='placeOrderScreen__orderDetails'>\n          <div className='orderDetails-shippingAddress'>\n            <p className='title'>Shipping</p>\n            <p className='orderDetails-content'>\n              <strong>Address:</strong>{' '}\n              <span>\n                {cart.shippingAddress.address}, {cart.shippingAddress.city},{' '}\n                {cart.shippingAddress.postalCode},{' '}\n                {cart.shippingAddress.country}.\n              </span>\n            </p>\n          </div>\n          <div className='orderDetails-paymentMethod'>\n            <p className='title'>Payment Method</p>\n            <p className='orderDetails-content'>\n              <strong>Method:</strong> <span> {cart.paymentMethod}</span>\n            </p>\n          </div>\n          <div className='orderDetails-orderItems'>\n            <p className='title'>Order Items</p>\n            {cart.cartItems.length === 0 ? (\n              <Message msg={`Your cart is empty`} messageType={'info'} />\n            ) : (\n              <div className='orderItems'>\n                {cart.cartItems.map((item, index) => (\n                  <div key={index} className='orderItem-item'>\n                    <img\n                      src={item.image}\n                      alt={item.name}\n                      className='orderItem-item-image'\n                    />\n                    <Link to={`/product/${item.product}`}>\n                      <p className='orderItem-item-name'>{item.name}</p>\n                    </Link>\n                    <p className='orderItem-item-price'>\n                      {item.qty} x ${item.price} = $\n                      {(item.qty * item.price).toFixed(2)}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n        {/* PlaceOrder Summary */}\n        <div className='placeOrderScreen__orderSummary'>\n          <table>\n            <thead>\n              <tr>\n                <th colSpan='2'>ORDER SUMMARY</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>Items</td>\n                <td>${cart.itemsPrice}</td>\n              </tr>\n              <tr>\n                <td>Shipping</td>\n                <td>${cart.shippingPrice}</td>\n              </tr>\n              <tr>\n                <td>Tax</td>\n                <td>${cart.taxPrice}</td>\n              </tr>\n              <tr>\n                <td>Total</td>\n                <td>${cart.totalPrice}</td>\n              </tr>\n              <tr>\n                <td colSpan='2'>\n                  <button\n                    className='placeOrderScreen__orderSummary-btn'\n                    type='button'\n                    disabled={cart.cartItems === 0}\n                    onClick={placeOrderHandler}\n                  >\n                    Place Order\n                  </button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </main>\n  )\n}\n\nexport default PlaceOrderScreen\n","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/OrderScreen.js",["180"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { PayPalButton } from 'react-paypal-button-v2'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport '../styles/OrderScreen.css'\nimport Message from '../components/Message'\nimport Spinner from '../components/Spinner'\nimport { getOrderDetails, payOrder } from '../actions/orderActions'\nimport { ORDER_PAY_RESET } from '../constants/orderConstants'\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\n\nconst OrderScreen = ({ match, history }) => {\n  // Get id from the URL\n  const orderId = match.params.id\n\n  // Initialize state\n  const [sdkReady, setSdkReady] = useState(false)\n\n  // Call an action\n  const dispatch = useDispatch()\n\n  // Brings in data from the global state (Redux store)\n  const userLogin = useSelector(state => state.userLogin)\n  const { userInfo } = userLogin\n\n  // Brings in data from the global state (Redux store)\n  const orderDetails = useSelector(state => state.orderDetails)\n  const { order, loading, error } = orderDetails\n\n  // Brings in data from the global state (Redux store)\n  const orderPay = useSelector(state => state.orderPay)\n  const { loading: loadingPay, success: successPay } = orderPay\n\n  if (!loading && !error) {\n    // Function that add two decimal to a value\n    const addDecimals = num => {\n      return (Math.round(num * 100) / 100).toFixed(2)\n    }\n\n    // Calculate price of all items\n    order.itemsPrice = addDecimals(\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\n    )\n  }\n\n  // Fires when the component loads\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/login')\n    }\n\n    const addPayPalScript = async () => {\n      const { data: clientId } = await axios.get('/api/config/paypal')\n      const script = document.createElement('script')\n      script.type = 'text/javascript'\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`\n      script.async = true\n      script.onload = () => {\n        setSdkReady(true)\n      }\n      document.body.appendChild(script)\n    }\n\n    if (!order || order._id !== orderId || successPay) {\n      dispatch({ type: ORDER_CREATE_RESET })\n      dispatch({ type: ORDER_PAY_RESET })\n      dispatch(getOrderDetails(orderId))\n    } else if (!order.isPaid) {\n      if (!window.paypal) {\n        addPayPalScript()\n      } else {\n        setSdkReady(true)\n      }\n    }\n  }, [userInfo, history, order, orderId, dispatch, successPay])\n\n  // Payment function\n  const successPaymentHandler = paymentResult => {\n    console.log(paymentResult)\n    dispatch(payOrder(orderId, paymentResult))\n  }\n\n  // Deliver function\n  const deliverHandler = () => {\n    console.log('deliverHandler')\n  }\n\n  // console.log(orderDetails)\n  return loading ? (\n    <Spinner />\n  ) : error ? (\n    <Message msg={error} messageType='danger' />\n  ) : (\n    <>\n      <main className='orderScreen'>\n        {/* Order Details */}\n        <div className='orderScreen__Details'>\n          <p className='orderscreen__title'>Order: {order._id}</p>\n          <div className='orderScreen__shipDetails'>\n            <p className='title'>Shipping</p>\n            <p className='orderScreen__Details-content'>\n              <strong>Name:</strong>{' '}\n              <span className='orderScreen__name'>{order.user.name} </span>\n            </p>\n            <p className='orderScreen__Details-content'>\n              <strong>Email:</strong>{' '}\n              <span>\n                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n              </span>\n            </p>\n            <p className='orderScreen__Details-content'>\n              <strong>Address:</strong>{' '}\n              <span>\n                {order.shippingAddress.address}, {order.shippingAddress.city},{' '}\n                {order.shippingAddress.postalCode},{' '}\n                {order.shippingAddress.country},\n              </span>\n            </p>\n            {order.isDelivered ? (\n              <Message msg={'Delivered on '} messageType={'success'}>\n                {order.deliveredAt}\n              </Message>\n            ) : (\n              <Message msg={'Not Delivered'} messageType={'danger'} />\n            )}\n          </div>\n          <div className='orderScreen__payMethod'>\n            <p className='title'>Payment Method</p>\n            <p className='orderScreen__Details-content'>\n              <strong>Method:</strong> <span> {order.paymentMethod}</span>\n            </p>\n            {order.isPaid ? (\n              <Message msg={'Paid on '} messageType={'success'}>\n                {order.paidAt}\n              </Message>\n            ) : (\n              <Message msg={'Not Paid'} messageType={'danger'} />\n            )}\n          </div>\n          <div className='orderScreen__orderItems'>\n            <p className='title'>Order Items</p>\n            {order.orderItems.length === 0 ? (\n              <Message msg={`Order is empty`} messageType={'info'} />\n            ) : (\n              <div className='orderItems'>\n                {order.orderItems.map((item, index) => (\n                  <div key={index} className='orderItem-item'>\n                    <img\n                      src={item.image}\n                      alt={item.name}\n                      className='orderItem-item-image'\n                    />\n                    <Link to={`/product/${item.product}`}>\n                      <p className='orderItem-item-name'>{item.name}</p>\n                    </Link>\n                    <p className='orderItem-item-price'>\n                      {item.qty} x ${item.price} = $\n                      {(item.qty * item.price).toFixed(2)}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n        {/* Order Summary */}\n        <div className='orderScreen__orderSummary'>\n          <table>\n            <thead>\n              <tr>\n                <th colSpan='2'>ORDER SUMMARY</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>Items</td>\n                <td>${order.itemsPrice}</td>\n              </tr>\n              <tr>\n                <td>Shipping</td>\n                <td>${order.shippingPrice}</td>\n              </tr>\n              <tr>\n                <td>Tax</td>\n                <td>${order.taxPrice}</td>\n              </tr>\n              <tr>\n                <td>Total</td>\n                <td>${order.totalPrice}</td>\n              </tr>\n              <tr>\n                <td colSpan='2'>\n                  {!order.isPaid && (\n                    <>\n                      {loadingPay && <Spinner />}\n                      {!sdkReady ? (\n                        <Spinner />\n                      ) : (\n                        <PayPalButton\n                          amount={order.totalPrice}\n                          onSuccess={successPaymentHandler}\n                        />\n                      )}\n                    </>\n                  )}\n                  {/* <button\n                    className='orderScreen__orderSummary-btn'\n                    type='button'\n                    onClick={deliverHandler()}\n                  >\n                    Mark As Delivered\n                  </button> */}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </main>\n    </>\n  )\n}\n\nexport default OrderScreen\n","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/Message.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/Spinner.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/components/CheckoutSteps.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/reducers/orderReducers.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/constants/orderConstants.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/actions/orderActions.js",["181"],"import axios from 'axios'\nimport {\n  ORDER_CREATE_REQUEST,\n  ORDER_CREATE_SUCCESS,\n  ORDER_CREATE_FAIL,\n  ORDER_DETAILS_REQUEST,\n  ORDER_DETAILS_FAIL,\n  ORDER_DETAILS_SUCCESS,\n  ORDER_PAY_REQUEST,\n  ORDER_PAY_SUCCESS,\n  ORDER_PAY_FAIL,\n  ORDER_LIST_MY_REQUEST,\n  ORDER_LIST_MY_SUCCESS,\n  ORDER_LIST_MY_FAIL,\n  ORDER_CREATE_RESET,\n} from '../constants/orderConstants'\n\n// Create User Order\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST,\n    })\n\n    // Destructure from global state\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    // Set Headers with content-Type & Authorization to get user Token\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.post(`/api/orders`, order, config)\n\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\n// Get User Order Details\nexport const getOrderDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST,\n    })\n\n    // Destructure from global state\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    // Set Headers with Authorization to get user Token\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.get(`/api/orders/${id}`, config)\n\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\n// User initiate payment for Order & Update order to paid\nexport const payOrder = (orderId, paymentResult) => async (\n  dispatch,\n  getState\n) => {\n  try {\n    dispatch({\n      type: ORDER_PAY_REQUEST,\n    })\n\n    // Destructure from global state\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    // Set Headers with Authorization to get user Token\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.put(\n      `/api/orders/${orderId}/pay`,\n      paymentResult,\n      config\n    )\n\n    dispatch({\n      type: ORDER_PAY_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: ORDER_PAY_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\n// List all User Orders to the logged-In user\nexport const listMyOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_LIST_MY_REQUEST,\n    })\n\n    // Destructure from global state(Redux store)\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    // Set Headers with Authorization to get user Token\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.get(`/api/orders/myorders`, config)\n\n    dispatch({\n      type: ORDER_LIST_MY_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: ORDER_LIST_MY_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n","/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/UserListScreen.js",[],"/Users/chinecherempromiseharry/Documents/ReactJs crash-course/citrus-aura-links/frontend/src/screens/UserEditScreen.js",[],{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"182","replacedBy":"186"},{"ruleId":"184","replacedBy":"187"},{"ruleId":"182","replacedBy":"188"},{"ruleId":"184","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":25},{"ruleId":"190","severity":1,"message":"194","line":33,"column":11,"nodeType":"192","messageId":"193","endLine":33,"endColumn":18},{"ruleId":"190","severity":1,"message":"195","line":33,"column":20,"nodeType":"192","messageId":"193","endLine":33,"endColumn":25},{"ruleId":"190","severity":1,"message":"196","line":38,"column":14,"nodeType":"192","messageId":"193","endLine":38,"endColumn":29},{"ruleId":"190","severity":1,"message":"197","line":39,"column":12,"nodeType":"192","messageId":"193","endLine":39,"endColumn":25},{"ruleId":"190","severity":1,"message":"198","line":40,"column":15,"nodeType":"192","messageId":"193","endLine":40,"endColumn":31},{"ruleId":"190","severity":1,"message":"195","line":22,"column":20,"nodeType":"192","messageId":"193","endLine":22,"endColumn":25},{"ruleId":"190","severity":1,"message":"195","line":41,"column":27,"nodeType":"192","messageId":"193","endLine":41,"endColumn":32},{"ruleId":"190","severity":1,"message":"199","line":85,"column":9,"nodeType":"192","messageId":"193","endLine":85,"endColumn":23},{"ruleId":"190","severity":1,"message":"200","line":15,"column":3,"nodeType":"192","messageId":"193","endLine":15,"endColumn":21},"no-native-reassign",["201"],"no-negated-in-lhs",["202"],["201"],["202"],["201"],["202"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'loadingRegister' is assigned a value but never used.","'errorRegister' is assigned a value but never used.","'userInfoRegister' is assigned a value but never used.","'deliverHandler' is assigned a value but never used.","'ORDER_CREATE_RESET' is defined but never used.","no-global-assign","no-unsafe-negation"]